recall <- TP / (TP / FN)
F1 <-(2*precision*recall) / (precision + recall)
c(Accuracy = accuarcy, Precision = precision, Recall = recall ,F1 = F1)
}
tree1.eval <- getEvaluationMetrics(tree1.cm)
tree1.eval
getEvaluationMetrics <- function(cm){
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[2,1]
FN <- cm[1,2]
accuarcy <- sum(diag(cm))/ sum(cm)
precision <- TP / (TP + FP)
recall <- TP / (TP / FN)
F1 <-(2*precision*recall) / (precision + recall)
c(Accuracy = accuarcy, Precision = precision, Recall = recall ,F1 = F1)
}
getEvaluationMetrics <- function(cm){
TP <- cm[1,1]
TN <- cm[2,2]
FP <- cm[2,1]
FN <- cm[1,2]
accuarcy <- sum(diag(cm))/ sum(cm)
precision <- TP / (TP + FP)
recall <- TP / (TP + FN)
F1 <-(2*precision*recall) / (precision + recall)
c(Accuracy = accuarcy, Precision = precision, Recall = recall ,F1 = F1)
}
tree1.eval <- getEvaluationMetrics(tree1.cm)
tree1.eval
rpart.plot(tree1, extra = 100)
str(datasub)
datasub$churn <- as.numeric(datasub$churn) -1
datasub$Gender <- as.numeric(datasub$Gender)
datasub$ageGroup <- as.numeric(datasub$ageGroup)
datasub$region <- as.numeric(datasub$region)
datasub$packet_category <- as.numeric(datasub$packet_category)
str(datasub)
datasub$grad <- NULL
library(corrplot)
matrica <- cor(datasub)
corrplot(matrica, method = "number", type = "upper", diag = FALSE)
corrplot(matrica, method = "number", type = "upper", diag = FALSE)
library(corrplot)
matrica <- cor(datasub)
corrplot(matrica, method = "number", type = "upper", diag = FALSE)
library(corrplot)
matrica <- cor(datasub)
corrplot(matrica, method = "number", type = "upper", diag = FALSE)
corrplot(matrica, method = "number", type = "upper", diag = FALSE)
sort(sqrt(vif(lm1)))
library(caret)
set.seed(1010)
indexes <- createDataPartition(datasub$churn, p = 0.8, list = FALSE)
train.data2 <- datasub[indexes, ]
test.data2 <- datasub[-indexes, ]
# pravimo model
# sad za lm uzimamo samo ove koje imaju jacu korelaciju,
# u ovom slucaju samo Critic_Score
lm1 <- lm(churn ~ . , data = train.data2)
summary(lm1)
library(car)
vif(lm1)
sqrt(vif(lm1))
sort(sqrt(vif(lm1)))
corrplot(matrica, method = "number", type = "upper", diag = FALSE)
corrplot(matrica, method = "number", type = "upper", diag = FALSE)
corrplot(matrica, method = "number", type = "upper", diag = FALSE)
library(caret)
set.seed(1010)
indexes <- createDataPartition(datasub$churn, p = 0.8, list = FALSE)
train.data2 <- datasub[indexes, ]
test.data2 <- datasub[-indexes, ]
lm1 <- lm(churn ~ . , data = train.data2)
summary(lm1)
corrplot(matrica, type = "upper", diag = FALSE)
corrplot(matrica, type = "upper", diag = FALSE)
# pravimo model
lm1 <- lm(churn ~ uplaceno+datumIsticanjaClanstva+cena_izabranog_plana+clansto , data = train.data2)
summary(lm1)
library(car)
vif(lm1)
sqrt(vif(lm1))
sort(sqrt(vif(lm1)))
lm3 <- lm(churn ~ . - time,
data = train.data2)
summary(lm3)
sort(sqrt(vif(lm3)))
lm4 <- lm(churn ~ packet_category + periodOfUse + datumTransakcije + autoProduzetak
+ metod_placanja + num_unq + num_100 + datumLogovanja + num_25,
data = train.data2)
summary(lm4)
sort(sqrt(vif(lm4)))
par(mfrow = c(1,1)) # da imamo samo 1 red i 1 kolonu za grafove
par(mfrow = c(2,2)) # da imamo 2 reda i 2 kolone za grafove
plot(lm4)
lm4 <- lm(churn ~ packet_category + periodOfUse + datumTransakcije + autoProduzetak
+ metod_placanja + num_unq + num_100 + datumLogovanja + num_25,
data = train.data2)
# LINEARNA REGRESIJA
str(datasub)
# Ucitavamo bazu
data <- read.csv("abcChurn.csv", stringsAsFactors = F)
str(data)
# gledamo sada koliko ima praznih polja
apply(data, 2, function(x) sum(is.na(x))) # 0 NA vrednosti
apply(data, 2, function(x) sum(x == "", na.rm = T)) #4394 za varijablu pol
apply(data, 2, function(x) sum(x == "-", na.rm = T)) # 0 za sve varijable
apply(data, 2, function(x) sum(x == " ", na.rm = T)) # 0 za sve varijable
apply(data, 2, function(x) sum(x == "N/A", na.rm = T)) # 0 za sve varijable
apply(data, 2, function(x) sum(x == "tbd", na.rm = T)) # 0 za sve varijable
# posmatramo koliko razlicitih vrednosti imaju, jer one koje imaju previse razm vrednosti necemo
# koristiti za predvidjanje u nasem modelu
apply(data, 2, function(x) length(unique(x)))
# X cemo izbaciti jer nece uticati na nas model
# Id takodje necemo koristiti za predvidjanje
data$X <- NULL
data$id <- NULL
str(data)
table(data$grad)
# beograd budimpesta Ljubljana London San Marino Monako Oslo Prag Rim Talin - EUROPEAN
# Tokio Singapur Seul Sangaj Peking - ASIAN
# Male i Indija - New Delhi Doha? - INIDIAN
# Havana, Rio, Karakas - AMERICAN
#Region korisnika
data$region <- ifelse(data$grad == "Beograd" | data$grad == "Budmipesta" | data$grad == "Ljubljana" |
data$grad == "London" | data$grad == "Monako" | data$grad == "Oslo" | data$grad == "Prag" |
data$grad == "Rim" | data$grad == "Talin" | data$grad == "San Marino", yes = "european", no = "other" )
datasub$grad <- NULL
# Kojoj starosnoj grupi pripada
str(data)
library(dplyr)
datasub <- data %>%
mutate(ageGroup = case_when(godine < 25 ~ 'Generation Z',
godine >= 25 & godine <40 ~ 'Millenials',
TRUE ~ 'Generation X'))
str(datasub)
datasub$ageGroup <- as.factor(datasub$ageGroup)
datasub$region <- as.factor(datasub$region)
datasub$pol <- as.factor(datasub$pol)
datasub$Gender <- datasub$pol
rm(data)
datasub$pol <- NULL
datasub$godine <- NULL
# broj godina koji je prosao od registorovanja korisnika:
datasub$time <-  2022 - as.numeric(strtrim(datasub$datum_registrovanja,4))
# period koliko je koristio muzicku platformu
datasub$periodOfUse <-as.numeric(strtrim(datasub$datumIsticanjaClanstva,4))-as.numeric(strtrim(datasub$datum_registrovanja,4))
datasub$datumIsticanjaClanstva <- NULL
datasub$period <- NULL
datasub$datum_registrovanja <- NULL
# vreme provedeno slusajuci muziku izrazeno u minutima
datasub$time_of_listening <-round(as.numeric(datasub$ukupno_vreme)/60,2)
datasub$ukupno_vreme <- NULL
# price range, ako je vece od 500 onda je premium paket izabran inace basic
datasub$packet_category <- ifelse(datasub$cena_izabranog_plana > 500, yes = "Premium", no = "Basic")
datasub$cena_izabranog_plana <- NULL
datasub$uplaceno <- NULL
str(datasub)
datasub$packet_category <- as.factor(datasub$packet_category)
summary(datasub)
table(datasub$Gender)
datasub$Gender [ datasub$Gender == ""] <- "male"
table(datasub$Gender)
apply(datasub, 2, function(x) sum(x == "", na.rm = T)) # vise nemamo praznih stringova
datasub$churn <- as.factor(datasub$churn)
# DRVO ODLUCIVANJA
install.packages('caret')
library(caret)
set.seed(1010) # allows for repeating the randomization process exactly
indexes <- createDataPartition(datasub$churn, p = 0.8, list = FALSE)
train.data <- datasub[indexes, ]
test.data <- datasub[-indexes, ]
library(e1071)
library(caret)
folds = trainControl(method = "cv", number = 10)
cpGrid = expand.grid(cp = seq(from = 0.001, to = 0.05, by = 0.001))
cv <- train(
x = train.data[, c(-14)],
y = train.data$churn,
method = "rpart",
control = rpart.control(minsplit = 20),
trControl = folds,
tuneGrid = cpGrid)
#The final value used for the model was cp = 0.001.
library(rpart)
tree1 <- rpart(churn ~ .,
data = train.data,
method = "class",
control = rpart.control(minsplit = 10, cp = 0.001))
lm3 <- lm(churn ~ . - time,
data = train.data2)
# LINEARNA REGRESIJA
str(datasub)
datasub$churn <- as.numeric(datasub$churn) -1
datasub$Gender <- as.numeric(datasub$Gender)
datasub$ageGroup <- as.numeric(datasub$ageGroup)
datasub$region <- as.numeric(datasub$region)
datasub$packet_category <- as.numeric(datasub$packet_category)
str(datasub)
datasub$grad <- NULL
library(corrplot)
matrica <- cor(datasub)
corrplot(matrica, type = "upper", diag = FALSE)
library(caret)
set.seed(1010)
indexes <- createDataPartition(datasub$churn, p = 0.8, list = FALSE)
train.data2 <- datasub[indexes, ]
test.data2 <- datasub[-indexes, ]
library(corrplot)
matrica <- cor(datasub)
corrplot(matrica, type = "upper", diag = FALSE)
library(caret)
set.seed(1010)
indexes <- createDataPartition(datasub$churn, p = 0.8, list = FALSE)
train.data2 <- datasub[indexes, ]
test.data2 <- datasub[-indexes, ]
# pravimo model
lm1 <- lm(churn ~ . , data = train.data2)
summary(lm1)
library(car)
vif(lm1)
sqrt(vif(lm1))
sort(sqrt(vif(lm1)))
lm3 <- lm(churn ~ . - time,
data = train.data2)
summary(lm3)
sort(sqrt(vif(lm3)))
lm4 <- lm(churn ~ packet_category + periodOfUse + datumTransakcije + autoProduzetak
+ metod_placanja + num_unq + num_100 + datumLogovanja + num_25,
data = train.data2)
summary(lm4)
sort(sqrt(vif(lm4)))
par(mfrow = c(1,1)) # da imamo samo 1 red i 1 kolonu za grafove
par(mfrow = c(2,2)) # da imamo 2 reda i 2 kolone za grafove
plot(lm4)
par(mfrow = c(1,1)) # da imamo samo 1 red i 1 kolonu za grafove
par(mfrow = c(2,2)) # da imamo 2 reda i 2 kolone za grafove
plot(lm4)
plot(lm4)
lm4 <- lm(churn ~ packet_category + periodOfUse + datumTransakcije + autoProduzetak
+ metod_placanja + num_unq + num_100 + datumLogovanja + num_25,
data = train.data2)
summary(lm4)
sort(sqrt(vif(lm4)))
par(mfrow = c(1,1)) # da imamo samo 1 red i 1 kolonu za grafove
par(mfrow = c(2,2)) # da imamo 2 reda i 2 kolone za grafove
plot(lm4)
plot(lm4)
par(mfrow = c(1,1)) # da imamo samo 1 red i 1 kolonu za grafove
par(mfrow = c(2,2)) # da imamo 2 reda i 2 kolone za grafove
plot(lm4)
plot(lm3)
par(mfrow = c(1,1)) # da imamo samo 1 red i 1 kolonu za grafove
plot(fit)
par(mfrow = c(2,2)) # da imamo 2 reda i 2 kolone za grafove
plot(lm4)
par(mfrow = c(1,1)) # da imamo samo 1 red i 1 kolonu za grafove
plot(lm4)
lm4.pred <- predict(lm4, newdata = test.data2)
test.data2$churn_pred <- lm4.pred
library(ggplot2)
ggplot(test.data2) +
geom_density(aes(x = churn, color = 'actual')) +
geom_density(aes(x = churn_pred, color = 'predicted'))
lm4 <- lm(churn ~ packet_category + periodOfUse + datumTransakcije + autoProduzetak
+ metod_placanja + num_unq + num_100 + datumLogovanja + num_25,
data = train.data2)
summary(lm4)
sort(sqrt(vif(lm4)))
par(mfrow = c(1,1)) # da imamo samo 1 red i 1 kolonu za grafove
par(mfrow = c(2,2)) # da imamo 2 reda i 2 kolone za grafove
plot(lm4)
lm4.pred <- predict(lm4, newdata = test.data2)
test.data2$churn_pred <- lm4.pred
library(ggplot2)
ggplot(test.data2) +
geom_density(aes(x = churn, color = 'actual')) +
geom_density(aes(x = churn_pred, color = 'predicted'))
# residual je razlika izmedju stvarne i predvidjene vrednosti,
# nju sumiramo i kvadriramo da bismo dobili RSS:
RSS <- sum((test.data2$churn - lm4.pred)^2)
# razlika izmedju vrednosti u testu i srednje vrednosti u trainu,
# nju sumiramo i kvadriramo da bismo dobili TSS
TSS <- sum((test.data2$churn - mean(train.data2$churn))^2)
# ovo je formula za RSQUARED
rsquared <- 1 - RSS / TSS
rsquared
# ovo je formula za RSQUARED
rsquared <- 1 - RSS / TSS
rsquared
summary(lm4)
# RMSE = Root Mean Squared Error, koliku gresku pravimo s predikcijama
RMSE <- sqrt(RSS/nrow(test.data2))
RMSE
# greska je 0
mean(test.data2$churn)
RMSE/mean(test.data2$churn)
# razlika izmedju vrednosti u testu i srednje vrednosti u trainu,
# nju sumiramo i kvadriramo da bismo dobili TSS
TSS <- sum((test.data2$churn - mean(train.data2$churn))^2)
# ovo je formula za RSQUARED
rsquared <- 1 - RSS / TSS
# residual je razlika izmedju stvarne i predvidjene vrednosti,
# nju sumiramo i kvadriramo da bismo dobili RSS:
RSS <- sum((test.data2$churn - lm4.pred)^2)
# razlika izmedju vrednosti u testu i srednje vrednosti u trainu,
# nju sumiramo i kvadriramo da bismo dobili TSS
TSS <- sum((test.data2$churn - mean(train.data2$churn))^2)
# ovo je formula za RSQUARED
rsquared <- 1 - RSS / TSS
rsquared
# RMSE = Root Mean Squared Error, koliku gresku pravimo s predikcijama
RMSE <- sqrt(RSS/nrow(test.data2))
RMSE
RMSE
# greska je 0
mean(test.data2$churn)
RMSE/mean(test.data2$churn)
library(survival)
str(datasub)
df.ap<-data.frame(time=datasub$periodOfUse,
event=ifelse(datasub$churn==1,0,1),
group=subset$ageGroup)
df.ap<-data.frame(time=datasub$periodOfUse,
event=ifelse(datasub$churn==1,0,1),
group=datasub$ageGroup)
model<-survfit(Surv(time,event)~group,data=df.ap)
library(survminer)
ggsurvplot(model,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("#E7B800","#2E9FDF","#000000"))
library(coin)
library(TH.data)
library(coin)
wilcox_test(datasub$churn~datasub$Gender)
wilcox_test(datasub$churn~datasub$pol)
ifelse(1.612e-12>0.05,yes="T",no="F")
wilcox_test(datasub$churn~datasub$clansto)
ggsurvplot(model,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("#E7B800","#2E9FDF","#000000"))
View(df.ap)
library(lubridate)
library(survival)
ggsurvplot(model,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("#E7B800","#2E9FDF","green"))
ggsurvplot(model,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("#E7B800","#2E9FDF","green"),
ggtheme=theme_bw(),palette=c("yellow","blue","green"))
ggtheme=theme_bw(),palette=c("yellow","blue","green"))
ggsurvplot(model,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("#E7B800","#2E9FDF","green"))
df.ap1<-data.frame(time=datasub$periodOfUse,
event=ifelse(datasub$churn==1,0,1),
group=datasub$metod_registrovanja)
model1<- survfit(Surv(time,event)~group,data=df.ap1)
ggsurvplot(model1,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("#orange","#blue","green", "pink", "brown"))
ggsurvplot(model1,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("orange","blue","green", "pink", "brown"))
table(premium = datasub$packet_category, Age Group = datasub$ageGroup)
table(premium = datasub$packet_category, AgeGroup = datasub$ageGroup)
datasub$packet_category <- as.character(datasub$packet_category)
datasub$packet_category <- as.numeric(datasub$packet_category)
datasub$packet_category <- factor(datasub$packet_category,levels = "Premium", "Basic")
rm (datasub$packet_category <- factor(datasub$packet_category,levels = "Premium", "Basic"))
table(premium = datasub$packet_category, AgeGroup = datasub$ageGroup)
# Ucitavamo bazu
data <- read.csv("abcChurn.csv", stringsAsFactors = F)
str(data)
# gledamo sada koliko ima praznih polja
apply(data, 2, function(x) sum(is.na(x))) # 0 NA vrednosti
apply(data, 2, function(x) sum(x == "", na.rm = T)) #4394 za varijablu pol
apply(data, 2, function(x) sum(x == "-", na.rm = T)) # 0 za sve varijable
apply(data, 2, function(x) sum(x == " ", na.rm = T)) # 0 za sve varijable
apply(data, 2, function(x) sum(x == "N/A", na.rm = T)) # 0 za sve varijable
apply(data, 2, function(x) sum(x == "tbd", na.rm = T)) # 0 za sve varijable
# posmatramo koliko razlicitih vrednosti imaju, jer one koje imaju previse razm vrednosti necemo
# koristiti za predvidjanje u nasem modelu
apply(data, 2, function(x) length(unique(x)))
# X cemo izbaciti jer nece uticati na nas model
# Id takodje necemo koristiti za predvidjanje
data$X <- NULL
data$id <- NULL
str(data)
table(data$grad)
# beograd budimpesta Ljubljana London San Marino Monako Oslo Prag Rim Talin - EUROPEAN
# Tokio Singapur Seul Sangaj Peking - ASIAN
# Male i Indija - New Delhi Doha? - INIDIAN
# Havana, Rio, Karakas - AMERICAN
#Region korisnika
data$region <- ifelse(data$grad == "Beograd" | data$grad == "Budmipesta" | data$grad == "Ljubljana" |
data$grad == "London" | data$grad == "Monako" | data$grad == "Oslo" | data$grad == "Prag" |
data$grad == "Rim" | data$grad == "Talin" | data$grad == "San Marino", yes = "european", no = "other" )
datasub$grad <- NULL
# Kojoj starosnoj grupi pripada
str(data)
library(dplyr)
datasub <- data %>%
mutate(ageGroup = case_when(godine < 25 ~ 'Generation Z',
godine >= 25 & godine <40 ~ 'Millenials',
TRUE ~ 'Generation X'))
str(datasub)
datasub$ageGroup <- as.factor(datasub$ageGroup)
datasub$region <- as.factor(datasub$region)
datasub$pol <- as.factor(datasub$pol)
datasub$Gender <- datasub$pol
rm(data)
datasub$pol <- NULL
datasub$godine <- NULL
# broj godina koji je prosao od registorovanja korisnika:
datasub$time <-  2022 - as.numeric(strtrim(datasub$datum_registrovanja,4))
# period koliko je koristio muzicku platformu
datasub$periodOfUse <-as.numeric(strtrim(datasub$datumIsticanjaClanstva,4))-as.numeric(strtrim(datasub$datum_registrovanja,4))
datasub$datumIsticanjaClanstva <- NULL
datasub$period <- NULL
datasub$datum_registrovanja <- NULL
# vreme provedeno slusajuci muziku izrazeno u minutima
datasub$time_of_listening <-round(as.numeric(datasub$ukupno_vreme)/60,2)
datasub$ukupno_vreme <- NULL
# price range, ako je vece od 500 onda je premium paket izabran inace basic
datasub$packet_category <- ifelse(datasub$cena_izabranog_plana > 500, yes = "Premium", no = "Basic")
datasub$cena_izabranog_plana <- NULL
datasub$uplaceno <- NULL
str(datasub)
datasub$packet_category <- as.factor(datasub$packet_category)
summary(datasub)
table(datasub$Gender)
datasub$Gender [ datasub$Gender == ""] <- "male"
table(datasub$Gender)
apply(datasub, 2, function(x) sum(x == "", na.rm = T)) # vise nemamo praznih stringova
datasub$churn <- as.factor(datasub$churn)
str(datasub)
library(survival)
df.ap<-data.frame(time=datasub$periodOfUse,
event=ifelse(datasub$churn==1,0,1),
group=datasub$ageGroup)
model<-survfit(Surv(time,event)~group,data=df.ap)
ggsurvplot(model,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("#E7B800","#2E9FDF","#000000"))
table(premium = datasub$packet_category, AgeGroup = datasub$ageGroup)
table(PacketCategory = datasub$packet_category, AgeGroup = datasub$ageGroup)
#################################
df.ap2<-data.frame(time=datasub$periodOfUse,
event=ifelse(datasub$churn==1,0,1),
group=datasub$packet_category)
model2<- survfit(Surv(time,event)~group,data=df.ap2)
ggsurvplot(model2,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("orange","blue","green", "pink", "brown"))
ggsurvplot(model2,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("green", "pink", "brown"))
#################################
df.ap2<-data.frame(time=datasub$periodOfUse,
event=ifelse(datasub$churn==1,0,1),
group=datasub$packet_category)
model2<- survfit(Surv(time,event)~group,data=df.ap2)
ggsurvplot(model2,pval=T,
conf.int=T,
risk.table=T,
risk.table.col="strata",
linetype="strata",
surv.median.line="hv",
ggtheme=theme_bw(),palette=c("green", "pink", "brown"))
